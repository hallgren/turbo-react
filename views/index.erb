<!DOCTYPE html>

<html>
  <head>
    <title>Reactize :: Apply DOM diffs while serving plain old HTML</title>
    <link rel="author" href="https://twitter.com/ssorallen">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" media="screen">
    <link rel="stylesheet" href="/reactize.css" media="screen">
    <script src="/dist/reactize.min.js"></script>
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div class="col-md-6 col-md-offset-3">
          <h1>Reactize</h1>
          <p class="lead">
            This is a mix of <a href="http://facebook.github.io/react/">Virtual-DOM</a>,
            <a href="https://github.com/TimBeyer/html-to-vdom">html-to-vdom</a>,
            and <a href="https://github.com/rails/turbolinks/">Turbolinks</a> that
            applies DOM "diffs" without any server configuration&mdash;it
            just needs plain old HTML.
          </p>
          <div class="panel <%= @panel_class %>">
            <div class="panel-heading">
              The Panel of Diff
            </div>
            <div class="panel-body">
              The panel's class this time is <code><%= @panel_class %></code>.
            </div>
          </div>
          <div class="progress progress-striped active">
            <div class="progress-bar progress-bar-success width<%= rand(21) * 5 %>"></div>
          </div>
          <p><a class="btn btn-primary" href="/">Re-request this page</a></p>
          <p class="text-muted" title="<%= @request_time.to_s %>">
            Requested at <%= @request_time.strftime("%Y-%m-%d %H:%M:%S") %>
          </p>
          <form>
            <input type="submit" value="<%= @request_time.strftime("%Y-%m-%d %H:%M:%S") %>"/><span> The &lt;input type="submit"/&gt; updates its value on re-requests =)</span>
          </form>

          <h3>What it's doing</h3>
          <p>"Re-request this page" is just a link to the current page. When you
            click it, Turbolinks intercepts the GET request and fetchs the
            full page via XHR.</p>
          <p>The panel is rendered with a random <code>panel-</code> class on each
            request, and the progress bar gets a random <code>widthX</code>
            class.</p>
          <p>With Turbolinks alone, the entire <code>body</code> would be
            replaced, and transitions would not happen. In this little demo
            though, Virtual-DOM adds and removes classes and text, and the attribute
            changes are animated with CSS transitions. The DOM is otherwise
            left in tact.</p>

          <h3>The Code</h3>
          <p>
            This whole app is on
            GitHub: <a href="https://github.com/hallgren/turbo-react/tree/virtual-dom">turbo-react</a>
          </p>

          <h3>Feedback</h3>
          <p>Tweet at
            me: <a href="https://twitter.com/ssorallen?rel=author">@ssorallen</a>
          </p>
        </div>
      </div>
    </div>
  </body>
</html>
